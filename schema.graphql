type JobInfoMergeRequest {
	iid: Int!
	projectId: Int!
	title: String!
	webUrl: String!
	authorId: Int!
}

type JobInfo {
	mergeRequest: JobInfoMergeRequest!
}

enum JobPriority {
	HIGH
	NORMAL
}

enum JobStatus {
	IN_PROGRESSJobStatus
	REBASING
	CHECKING_MERGE_STATUS
	WAITING
	WAITING_FOR_CI
}

type Job {
	priority: JobPriority!
	status: JobStatus!
	info: JobInfo!
}

type QueueInfo {
	projectName: String!
}

type Queue {
	name: String!
	info: QueueInfo!
	jobs: [Job!]!
}

type User {
	id: Int!
	name: String!
	username: String!
	email: String!
	webUrl: String!
	avatarUrl: String!
}

input UserInput {
	id: Int!
}

type Query {
	me: User!
	user(input: UserInput!): User
	queues: [Queue!]!
}

type Subscription {
	queues: [Queue!]!
}

input UnassignInput {
	projectId: Int!
	mergeRequestIid: Int!
}

type Mutation {
	unassign(
		input: UnassignInput!
	): Int
}
